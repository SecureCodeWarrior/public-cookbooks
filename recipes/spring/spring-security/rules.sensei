{
  "header": {
    "name": "Custom cookbook",
    "description": "cookbook for internal use within our company",
    "company": "SCW",
    "appsecmail": "appsecteam@senseifinancial.com",
    "rulepack_id": "7b24eacd-15c5-4b27-9e75-3ff13690c008",
    "rulePackVersion": "0.1.0",
    "enabled": true
  },
  "rules": [
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        value: CookieCsrfTokenRepository.withHttpOnlyFalse()\n    name: csrfTokenRepository\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Set HttpOnly to true\"\n    actions:\n      - rewrite:\n          to: \"org.springframework.security.web.csrf.CookieCsrfTokenRepository cookieCsrfTokenRepository\\\n        \\ \u003d new org.springframework.security.web.csrf.CookieCsrfTokenRepository();\\n\\\n        cookieCsrfTokenRepository.setCookieHttpOnly(true);\\n{{{ expressionElement\\\n        \\ }}}(cookieCsrfTokenRepository)\"\n",
        "ruleName": "Security Misconfiguration: Disabled Security Settings: CookieCsrfTokenRepository#withHttpOnlyFalse",
        "category": "csrf:csrf",
        "ruleID": "d80d7dcf-6c4d-42c2-a38b-1da6e441db2d",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledSecuritySettingsCookieCsrfTokenRepositorywithHttpOnlyFalse.html",
        "ruleShortDescription": "Make sure to set HttpOnly to true to protect against CSRF or remove it",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        type: boolean\n        value: \u0027false\u0027\n    name: includeSubDomains\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.HstsConfig\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Set includeSubDomains to true\"\n    actions:\n      - modifyArguments:\n          rewrite:\n            1: \"true\"\n",
        "ruleName": "Security Misconfiguration: HSTS - includeSubDomains",
        "category": "misconfig:infoexp",
        "ruleID": "eef53ef1-5079-4c5b-bf75-00be333f8032",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationHSTS-includeSubDomains.html",
        "ruleShortDescription": "Include subdomains in the HSTS domain",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: disable\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.HstsConfig\n    on:\n      methodcall:\n        name: httpStrictTransportSecurity\n        declaration:\n          type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable HSTS\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}\"\n",
        "ruleName": "Security Misconfiguration: Disable Security Features - HSTS",
        "category": "misconfig:securityfeatures",
        "ruleID": "9cadcb2c-8338-4606-8329-a48e70113d43",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisableSecurityFeatures-HSTS.html",
        "ruleShortDescription": "Enforce HSTS protection against vulnerabilities over HTTP",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    not:\n      followedBy:\n        methodcall:\n          name: requiresSecure\n    in:\n      method:\n        in:\n          class:\n            super:\n              name: WebSecurityConfigurerAdapter\n        name: configure\n        parameters:\n          1:\n            type: HttpSecurity\n    type:\n      reference:\n        matches: org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer\u003c.*\u003e.ChannelRequestMatcherRegistry\n      checkInheritance: true\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Append requiresSecure method call\"\n    actions:\n      - addMethodCall:\n          name: \"requiresSecure\"\n          position: \"first-available-spot\"\n          useMethodChaining: true",
        "ruleName": "Should use requiresSecure",
        "ruleID": "cea0f765-cde9-4165-bd8b-31559443e432",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationSensitivedataexposure-DonotacceptanythingovernonHTTPSconnections.html",
        "ruleShortDescription": "Use of HTTP instead of HTTPS is insecure",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: none\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer\n    on:\n      methodcall:\n        name: sessionFixation\n        declaration:\n          type: org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer\n        on:\n          methodcall:\n            name: sessionManagement\n            declaration:\n              type: org.springframework.security.config.annotation.web.builders.HttpSecurity\n  \n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Use newSession() to create a new session without preserving attributes of\\\n    \\ the old session\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.newSession()\"\n- name: \"Use migrateSession() to create a new session with the attributes of the old\\\n    \\ session\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.migrateSession()\"\n",
        "ruleName": "Protect against Session Fixation attacks",
        "ruleID": "510cf404-1ccd-4d92-9251-844d229bc63f",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "ProtectagainstSessionFixationattacks.html",
        "ruleShortDescription": "Spring Security\u0027s default protection against Session Fixation is disabled, which means an attacker could hijack a valid user session",
        "ruleErrorLevel": 1,
        "ruleEnabled": true,
        "ruleScope": []
      }
    }
  ],
  "generators": []
}