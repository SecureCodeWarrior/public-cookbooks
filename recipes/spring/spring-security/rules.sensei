{
  "header": {
    "name": "Custom cookbook",
    "description": "cookbook for internal use within our company",
    "company": "SCW",
    "appsecmail": "appsecteam@senseifinancial.com",
    "rulepack_id": "7b24eacd-15c5-4b27-9e75-3ff13690c009",
    "rulePackVersion": "0.1.0",
    "enabled": true
  },
  "rules": [
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        value: CookieCsrfTokenRepository.withHttpOnlyFalse()\n    name: csrfTokenRepository\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Set HttpOnly to true\"\n    actions:\n      - rewrite:\n          to: \"org.springframework.security.web.csrf.CookieCsrfTokenRepository cookieCsrfTokenRepository\\\n        \\ \u003d new org.springframework.security.web.csrf.CookieCsrfTokenRepository();\\n\\\n        cookieCsrfTokenRepository.setCookieHttpOnly(true);\\n{{{ expressionElement\\\n        \\ }}}(cookieCsrfTokenRepository)\"\n",
        "ruleName": "Security Misconfiguration: Disabled Security Settings: CookieCsrfTokenRepository#withHttpOnlyFalse",
        "category": "csrf:csrf",
        "ruleID": "d80d7dcf-6c4d-42c2-a38b-1da6e441db2d",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledSecuritySettingsCookieCsrfTokenRepositorywithHttpOnlyFalse.html",
        "ruleShortDescription": "Make sure to set HttpOnly to true to protect against CSRF or remove it",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        type: boolean\n        value: \u0027false\u0027\n    name: includeSubDomains\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.HstsConfig\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Set includeSubDomains to true\"\n    actions:\n      - modifyArguments:\n          rewrite:\n            1: \"true\"\n",
        "ruleName": "Security Misconfiguration: HSTS - includeSubDomains",
        "category": "misconfig:infoexp",
        "ruleID": "eef53ef1-5079-4c5b-bf75-00be333f8032",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationHSTS-includeSubDomains.html",
        "ruleShortDescription": "Include subdomains in the HSTS domain",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: disable\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.HstsConfig\n    on:\n      methodcall:\n        name: httpStrictTransportSecurity\n        declaration:\n          type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable HSTS\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}\"\n",
        "ruleName": "Security Misconfiguration: Disable Security Features - HSTS",
        "category": "misconfig:securityfeatures",
        "ruleID": "9cadcb2c-8338-4606-8329-a48e70113d43",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisableSecurityFeatures-HSTS.html",
        "ruleShortDescription": "Enforce HSTS protection against vulnerabilities over HTTP",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    not:\n      followedBy:\n        methodcall:\n          name: requiresSecure\n    in:\n      method:\n        in:\n          typeDeclaration:\n            super:\n              name: WebSecurityConfigurerAdapter\n        name: configure\n        parameters:\n          1:\n            type: HttpSecurity\n    type:\n      reference:\n        matches: org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer\u003c.*\u003e.ChannelRequestMatcherRegistry\n      checkInheritance: true\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Append requiresSecure method call\"\n    actions:\n      - addMethodCall:\n          name: \"requiresSecure\"\n          position: \"first-available-spot\"\n          useMethodChaining: true",
        "ruleName": "Should use requiresSecure",
        "ruleID": "cea0f765-cde9-4165-bd8b-31559443e432",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationSensitivedataexposure-DonotacceptanythingovernonHTTPSconnections.html",
        "ruleShortDescription": "Use of HTTP instead of HTTPS is insecure",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: none\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer\n    on:\n      methodcall:\n        name: sessionFixation\n        declaration:\n          type: org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer\n        on:\n          methodcall:\n            name: sessionManagement\n            declaration:\n              type: org.springframework.security.config.annotation.web.builders.HttpSecurity\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Use newSession() to create a new session without preserving attributes of\\\n    \\ the old session\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.newSession()\"\n- name: \"Use migrateSession() to create a new session with the attributes of the old\\\n    \\ session\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.migrateSession()\"\n",
        "ruleName": "Protect against Session Fixation attacks",
        "ruleID": "510cf404-1ccd-4d92-9251-844d229bc63f",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "ProtectagainstSessionFixationattacks.html",
        "ruleShortDescription": "Spring Security\u0027s default protection against Session Fixation is disabled, which means an attacker could hijack a valid user session",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: standard\n    type: org.springframework.security.crypto.encrypt.Encryptors\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Replace with .stronger()\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.stronger{{{ argumentList }}}\"\n",
        "ruleName": "Use .stronger() for a more secure alternative",
        "ruleID": "32c66aed-8a77-41ac-bc1f-3b69e5408eea",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "Usestrongerforamoresecurealternative.html",
        "ruleShortDescription": "Encryptors.stronger() is more secure than Encryptors.standard()",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        not:\n          containsUntrustedInput: true\n        type: java.lang.String\n    name:\n      matches: standard|stronger|text|delux|queryableText\n    type: org.springframework.security.crypto.encrypt.Encryptors\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Retrieve the password from an environment variable\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        1: \"System.getenv(\\\"PASSWORD\\\")\"\n",
        "ruleName": "Avoid hardcoded secrets when using the Encryptors class",
        "category": "broken_cryptography:use_of_hardcoded_keys",
        "ruleID": "3d94412c-505f-4351-bf1e-0453506d7f06",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "AvoidhardcodedsecretswhenusingtheEncryptorsclass.html",
        "ruleShortDescription": "Using the Encryptors class in combination with hardcoded secrets is security sensitive",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      2:\n        containsUntrustedInput: false\n        type: java.lang.String\n    name: stronger\n    type: org.springframework.security.crypto.encrypt.Encryptors\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Generate a hex-encoded, random 8-byte salt\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        2: \"org.springframework.security.crypto.keygen.KeyGenerators.string().generateKey()\"\n",
        "ruleName": "Encryptors requires the use of a random 8-byte salt",
        "category": "crypto:insecurerandomness",
        "ruleID": "0a47a3c8-9d00-4c36-b304-006ab2b826dd",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "Usearandom8bytesalt.html",
        "ruleShortDescription": "The salt should be random, 8-bytes and in hex-encoded String",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: text\n    type: org.springframework.security.crypto.encrypt.Encryptors\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Use .delux()\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}.delux{{{ argumentList }}}\"\n",
        "ruleName": "Use .delux() for a \u0027stronger\u0027 password-based encryption",
        "ruleID": "1685f49f-480c-4313-a229-d5c9aff7e2c8",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "Useastrongerpasswordbasedencryption.html",
        "ruleShortDescription": "Encryptors.delux() uses a \u0027stronger\u0027 password-based encryption",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        containsUntrustedInput: false\n        type: java.lang.String\n    name: encode\n    anyOf:\n    - type: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\n    - type: org.springframework.security.crypto.scrypt.SCryptPasswordEncoder\n    - type: org.springframework.security.crypto.password.Pbkdf2PasswordEncoder\n    - type: org.springframework.security.crypto.argon2.Argon2PasswordEncoder\n    - type: org.springframework.security.crypto.password.PasswordEncoder\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Retrieve the password from an environment variable\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        1: \"System.getenv(\\\"PASSWORD\\\")\"\n",
        "ruleName": "Avoid hardcoded secrets when using passwordencoders",
        "category": "broken_cryptography:use_of_hardcoded_keys",
        "ruleID": "81543c6a-e23c-471c-919d-3e93b572bf6e",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "Avoidhardcodedsecretswhenusingpasswordencoders.html",
        "ruleShortDescription": "Using passwordencoders in combination with hardcoded secrets is security sensitive",
        "ruleErrorLevel": 2,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  assignment:\n    not:\n      in:\n        method:\n          annotation:\n            type: Bean\n          returnType: \u0027{{{ type }}}\u0027\n    anyOf:\n    - expressionType: org.springframework.security.crypto.password.Pbkdf2PasswordEncoder\n    - expressionType: org.springframework.security.crypto.scrypt.SCryptPasswordEncoder\n    - expressionType: org.springframework.security.crypto.argon2.Argon2PasswordEncoder\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Create a custom instance of DelegatingPasswordEncoder\"\n  actions:\n  - rewrite:\n      to: \"java.util.Map\u003cString, org.springframework.security.crypto.password.PasswordEncoder\u003e\\\n        \\ encoders \u003d new java.util.HashMap\u003c\u003e();\\nencoders.put(\\\"{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{\\\n        \\ typeElement }}}{{/lowerCase}}{{/sed}}\\\", {{{ assignedExpression }}});\\n\\n\\\n        org.springframework.security.crypto.password.PasswordEncoder {{{ qualifier\\\n        \\ }}} \u003d new org.springframework.security.crypto.password.DelegatingPasswordEncoder(\\\"\\\n        {{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ typeElement }}}{{/lowerCase}}{{/sed}}\\\"\\\n        , encoders);\"\n      target: \"self\"\n",
        "ruleName": "Spring Security recommends DelegatingPasswordEncoder for best practices ",
        "ruleID": "be170b97-b870-498c-843e-e3351e6d48ec",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityrecommendsDelegatePasswordEncoderforbestpractices.html",
        "ruleShortDescription": "DelegatingPasswordEncoder allows more flexibility when using several encoders, for code changes, and for migrating",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  method:\n    annotation:\n      type: Bean\n    returnType:\n      reference:\n        caseSensitive: false\n        matches: SCryptPasswordEncoder|Pbkdf2PasswordEncoder|Argon2PasswordEncoder\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Create a custom instance of DelegatingPasswordEncoder\"\n  actions:\n  - rewrite:\n      to: \"{{{ modifierList }}} PasswordEncoder delegatingPasswordEncoder() {\\njava.util.Map\u003cString,\\\n        \\ org.springframework.security.crypto.password.PasswordEncoder\u003e encoders \u003d\\\n        \\ new java.util.HashMap\u003c\u003e();\\nencoders.put(\\\"{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{\\\n        \\ returnTypeElement }}}{{/lowerCase}}{{/sed}}\\\", new {{{ returnType }}}());\\n\\\n        \\nDelegatingPasswordEncoder delegatingPasswordEncoder \u003d new org.springframework.security.crypto.password.DelegatingPasswordEncoder(\\\"\\\n        {{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ returnTypeElement }}}{{/lowerCase}}{{/sed}}\\\"\\\n        , encoders);\\ndelegatingPasswordEncoder.setDefaultPasswordEncoderForMatches(new\\\n        \\ {{{ returnTypeElement }}}());\\n\\nreturn delegatingPasswordEncoder;\\n}\"\n",
        "ruleName": "Spring Security recommends DelegatingPasswordEncoder for best practices (Bean)",
        "ruleID": "3d47b7e3-8dcc-401f-a7d1-e700acb02963",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityrecommendsDelegatePasswordEncoderforbestpracticesBean.html",
        "ruleShortDescription": "DelegatingPasswordEncoder allows more flexibility when using several encoders, for code changes, and for migrating",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  assignment:\n    not:\n      in:\n        method:\n          annotation:\n            type: Bean\n          returnType: \u0027{{{ type }}}\u0027\n    expressionType: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Use a customizable instance of DelegatingPasswordEncoder\"\n  actions:\n  - rewrite:\n      to: \"java.util.Map\u003cString, org.springframework.security.crypto.password.PasswordEncoder\u003e\\\n        \\ encoders \u003d new java.util.HashMap\u003c\u003e();\\nencoders.put(\\\"{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{\\\n        \\ typeElement }}}{{/lowerCase}}{{/sed}}\\\", {{{ assignedExpression }}});\\n\\n\\\n        org.springframework.security.crypto.password.PasswordEncoder {{{ qualifier\\\n        \\ }}} \u003d new org.springframework.security.crypto.password.DelegatingPasswordEncoder(\\\"\\\n        {{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ typeElement }}}{{/lowerCase}}{{/sed}}\\\"\\\n        , encoders);\"\n      target: \"self\"\n- name: \"Create an instance of DelegatingPasswordEncoder using PasswordEncoderFactories\\\n    \\ (default: bcrypt)\"\n  actions:\n  - rewrite:\n      to: \"org.springframework.security.crypto.password.PasswordEncoder {{{ qualifier\\\n        \\ }}} \u003d org.springframework.security.crypto.factory.PasswordEncoderFactories.createDelegatingPasswordEncoder();\"\n",
        "ruleName": "Spring Security recommends DelegatingPasswordEncoder for best practices (BCrypt)",
        "ruleID": "940f200a-db66-4b12-8d0c-43b8e44edd77",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityrecommendsDelegatePasswordEncoderforbestpracticesBCrypt.html",
        "ruleShortDescription": "DelegatingPasswordEncoder allows more flexibility when using several encoders, for code changes, and for migrating",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  method:\n    annotation:\n      type: Bean\n    returnType:\n      reference:\n        caseSensitive: false\n        is: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\n      checkInheritance: true\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Create a customizable instance of DelegatingPasswordEncoder\"\n  actions:\n  - rewrite:\n      to: \"{{{ modifierList }}} PasswordEncoder delegatingPasswordEncoder() {\\njava.util.Map\u003cString,\\\n        \\ org.springframework.security.crypto.password.PasswordEncoder\u003e encoders \u003d\\\n        \\ new java.util.HashMap\u003c\u003e();\\nencoders.put(\\\"{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{\\\n        \\ returnTypeElement }}}{{/lowerCase}}{{/sed}}\\\", new {{{ returnType }}}());\\n\\\n        \\nDelegatingPasswordEncoder delegatingPasswordEncoder \u003d new org.springframework.security.crypto.password.DelegatingPasswordEncoder(\\\"\\\n        {{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ returnTypeElement }}}{{/lowerCase}}{{/sed}}\\\"\\\n        , encoders);\\ndelegatingPasswordEncoder.setDefaultPasswordEncoderForMatches(new\\\n        \\ {{{ returnTypeElement }}}());\\n\\nreturn delegatingPasswordEncoder;\\n}\"\n- name: \"Create a DelegatingPasswordEncoder instance using PasswordEncoderFactories\\\n    \\  (default: bcrypt)\"\n  actions:\n  - rewrite:\n      to: \"{{{ modifierList }}} org.springframework.security.crypto.password.PasswordEncoder\\\n        \\ delegatingPasswordEncoder() {\\nreturn org.springframework.security.crypto.factory.PasswordEncoderFactories.createDelegatingPasswordEncoder();\\n\\\n        }\"\n",
        "ruleName": "Spring Security recommends DelegatingPasswordEncoder for best practices (Bean - BCrypt)",
        "ruleID": "593acd41-f69b-4692-82fd-b4f232270afb",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityrecommendsDelegatePasswordEncoderforbestpracticesBeanBCrypt.html",
        "ruleShortDescription": "DelegatingPasswordEncoder allows more flexibility when using several encoders, for code changes, and for migrating",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    name: disable\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig\n    on:\n      methodcall:\n        declaration:\n          name: xssProtection\n          type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer\n        on:\n          methodcall:\n            declaration:\n              name: headers\n              type: org.springframework.security.config.annotation.web.builders.HttpSecurity\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n  - name: \"Enable XssProtection\"\n    actions:\n      - rewrite:\n          to: \"{{{ qualifier }}}\"\n",
        "ruleName": "Security Misconfiguration: XSS protection: Disabled Header - disable()",
        "category": "xss:reflected",
        "ruleID": "a044324f-bcda-4cde-92ee-ff19b90354bd",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledXSSprotectioninSpringSecurity.html",
        "ruleShortDescription": "Do not disable Spring Security\u0027s built-in XSS protection",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        type: boolean\n        value: \u0027false\u0027\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name: xssProtectionEnabled\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable XssProtection\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        1: \"true\"\n",
        "ruleName": "Security Misconfiguration: XSS protection: Disabled Header - xssProtectionEnabled()",
        "category": "xss:reflected",
        "ruleID": "a9865f59-0025-46f3-bbe2-111ec56636dd",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledXSSprotectioninSpringSecurity-xssProtectionEnabled.html",
        "ruleShortDescription": "Do not disable Spring Security\u0027s built-in XSS protection",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        type: boolean\n        value: \u0027false\u0027\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name: block\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable XssProtection\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        1: \"true\"\n",
        "ruleName": "Security Misconfiguration: XSS protection: Disabled Header - block()",
        "category": "xss:reflected",
        "ruleID": "4611c7d4-41c0-4ffd-bafa-31beaa2030c9",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledXSSprotectioninSpringSecurity-block.html",
        "ruleShortDescription": "Protection against XSS is better done by blocking the content instead of filtering it",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name:\n      matches: xssProtection\n    anyOf:\n    - not:\n        followedBy:\n          methodcall: {\n            }\n    - followedBy:\n        methodcall:\n          not:\n            followedBy:\n              methodcall:\n                name: contentSecurityPolicy\n          name: and\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Add a CSP header\"\n  actions:\n  - rewrite:\n      to: \"{{{ expressionElement }}}().and().contentSecurityPolicy(\\\"script-src \u0027self\u0027\\\"\\\n        )\"\n",
        "ruleName": "Security Misconfiguration: XSS protection: Add CSP header - xssProtection",
        "category": "xss:reflected",
        "ruleID": "a1047884-4b6b-438d-999a-d3e503cce393",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityHeadersaddCSPheader-xssProtection.html",
        "ruleShortDescription": "Add a CSP header for additional protection agains XSS and data injection",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        value: \u0027true\u0027\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name:\n      matches: xssProtectionEnabled|block\n    anyOf:\n    - not:\n        followedBy:\n          methodcall: {\n            }\n    - followedBy:\n        methodcall:\n          not:\n            followedBy:\n              methodcall:\n                name: contentSecurityPolicy\n          name: and\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Add a CSP header\"\n  actions:\n  - rewrite:\n      to: \"{{{ . }}}.and().contentSecurityPolicy(\\\"script-src \u0027self\u0027\\\")\"\n",
        "ruleName": "Security Misconfiguration: XSS protection: Add CSP header - XXssConfig",
        "category": "xss:reflected",
        "ruleID": "799415d8-4367-4170-9df1-9b7b9520ef02",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SpringSecurityHeadersaddCSPheader-XXssConfig.html",
        "ruleShortDescription": "Add a CSP header for additional protection agains XSS and data injection",
        "ruleErrorLevel": 0,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name:\n      matches: defaultsDisabled|disable\n    declaration:\n      type:\n        reference:\n          matches: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer|AbstractHttpConfigurer\n        checkInheritance: true\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable default headers\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}\"\n",
        "ruleName": "Security Misconfiguration: Disabled Headers",
        "category": "misconfig:securityfeatures",
        "ruleID": "8dcc914f-bf2c-4d50-a9fd-3e7e117c5339",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledHeaders.html",
        "ruleShortDescription": "Disabling Spring Security\u0027s default headers makes the application vulnerable",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    in:\n      typeDeclaration:\n        super:\n          name: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\n    name: disable\n    declaration:\n      type: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FrameOptionsConfig\n",
        "mver": 8,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Enable default headers\"\n  actions:\n  - rewrite:\n      to: \"{{{ qualifier }}}\"\n",
        "ruleName": "Security Misconfiguration: Clickjacking protection: Disabled Header - frameOptions()",
        "category": "misconfig:clickjack",
        "ruleID": "6ff71a63-4229-4f6d-9218-a682172e076b",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "SecurityMisconfigurationDisabledclickjackingprotectioninSpringSecurity-frameOptions.html",
        "ruleShortDescription": "Disabling Spring Security default headers makes the application vulnerable to clickjackin",
        "ruleErrorLevel": 1,
        "ruleScope": [],
        "ruleEnabled": true
      }
    }
  ],
  "generators": []
}