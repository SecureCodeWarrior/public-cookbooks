id: scw:spring:security:DelegatingPasswordEncoder-bean-return
version: 8
metadata:
  name: Spring Security recommends DelegatingPasswordEncoder for best practices (Bean
    - BCrypt)
  shortDescription: DelegatingPasswordEncoder allows more flexibility when using several
    encoders, for code changes, and for migrating
  level: info
  language: java; kotlin
  scwCategory: ""
  enabled: true
  descriptionFile: descriptions/SpringSecurityrecommendsDelegatePasswordEncoderforbestpracticesBeanBCrypt.html
search:
  method:
    annotation:
      type: Bean
    returnType:
      reference:
        caseSensitive: false
        is: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
      checkInheritance: true
availableFixes:
- name: Create a customizable instance of DelegatingPasswordEncoder
  actions:
  - rewrite:
      to: |-
        {{{ modifierList }}} PasswordEncoder delegatingPasswordEncoder() {
        java.util.Map<String, org.springframework.security.crypto.password.PasswordEncoder> encoders = new java.util.HashMap<>();
        encoders.put("{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ returnTypeElement }}}{{/lowerCase}}{{/sed}}", new {{{ returnType }}}());

        DelegatingPasswordEncoder delegatingPasswordEncoder = new org.springframework.security.crypto.password.DelegatingPasswordEncoder("{{#sed}}s/passwordencoder//g,{{#lowerCase}}{{{ returnTypeElement }}}{{/lowerCase}}{{/sed}}", encoders);
        delegatingPasswordEncoder.setDefaultPasswordEncoderForMatches(new {{{ returnTypeElement }}}());

        return delegatingPasswordEncoder;
        }
- name: 'Create a DelegatingPasswordEncoder instance using PasswordEncoderFactories
    (default: bcrypt)'
  actions:
  - rewrite:
      to: |-
        {{{ modifierList }}} org.springframework.security.crypto.password.PasswordEncoder delegatingPasswordEncoder() {
        return org.springframework.security.crypto.factory.PasswordEncoderFactories.createDelegatingPasswordEncoder();
        }
